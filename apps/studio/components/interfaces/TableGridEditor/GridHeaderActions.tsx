import { PermissionAction } from '@supabase/shared-types/out/constants'
import { Lock, MousePointer2, PlusCircle, Unlock } from 'lucide-react'
import Link from 'next/link'
import { useState } from 'react'
import { toast } from 'sonner'

import { useParams } from 'common'
import { getEntityLintDetails } from 'components/interfaces/TableGridEditor/TableEntity.utils'
import { useProjectContext } from 'components/layouts/ProjectLayout/ProjectContext'
import APIDocsButton from 'components/ui/APIDocsButton'
import { ButtonTooltip } from 'components/ui/ButtonTooltip'
import { useDatabasePoliciesQuery } from 'data/database-policies/database-policies-query'
import { useDatabasePublicationsQuery } from 'data/database-publications/database-publications-query'
import { useDatabasePublicationUpdateMutation } from 'data/database-publications/database-publications-update-mutation'
import { useProjectLintsQuery } from 'data/lint/lint-query'
import {
  Entity,
  isTableLike,
  isForeignTable as isTableLikeForeignTable,
  isMaterializedView as isTableLikeMaterializedView,
  isView as isTableLikeView,
} from 'data/table-editor/table-editor-types'
import { useTableUpdateMutation } from 'data/tables/table-update-mutation'
import { useSendEventMutation } from 'data/telemetry/send-event-mutation'
import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'
import { useIsFeatureEnabled } from 'hooks/misc/useIsFeatureEnabled'
import { useSelectedOrganization } from 'hooks/misc/useSelectedOrganization'
import { PROTECTED_SCHEMAS } from 'lib/constants/schemas'
import { useTableEditorTableStateSnapshot } from 'state/table-editor-table'
import {
  Button,
  PopoverContent_Shadcn_,
  PopoverTrigger_Shadcn_,
  Popover_Shadcn_,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  cn,
} from 'ui'
import ConfirmModal from 'ui-patterns/Dialogs/ConfirmDialog'
import ConfirmationModal from 'ui-patterns/Dialogs/ConfirmationModal'
import { RoleImpersonationPopover } from '../RoleImpersonationSelector'
import ViewEntityAutofixSecurityModal from './ViewEntityAutofixSecurityModal'

export interface GridHeaderActionsProps {
  table: Entity
}

const GridHeaderActions = ({ table }: GridHeaderActionsProps) => {
  const { ref } = useParams()
  const { project } = useProjectContext()
  const org = useSelectedOrganization()

  // need project lints to get security status for views
  const { data: lints = [] } = useProjectLintsQuery({ projectRef: project?.ref })

  const isTable = isTableLike(table)
  const isForeignTable = isTableLikeForeignTable(table)
  const isView = isTableLikeView(table)
  const isMaterializedView = isTableLikeMaterializedView(table)

  const realtimeEnabled = useIsFeatureEnabled('realtime:all')
  const isLocked = PROTECTED_SCHEMAS.includes(table.schema)

  const { mutate: updateTable } = useTableUpdateMutation({
    onError: (error) => {
      toast.error(`启用 RLS 失败：${error.message}`)
    },
    onSettled: () => {
      closeConfirmModal()
    },
  })

  const [showEnableRealtime, setShowEnableRealtime] = useState(false)
  const [rlsConfirmModalOpen, setRlsConfirmModalOpen] = useState(false)
  const [isAutofixViewSecurityModalOpen, setIsAutofixViewSecurityModalOpen] = useState(false)

  const snap = useTableEditorTableStateSnapshot()
  const showHeaderActions = snap.selectedRows.size === 0

  const projectRef = project?.ref
  const { data } = useDatabasePoliciesQuery({
    projectRef: project?.ref,
    connectionString: project?.connectionString,
  })
  const policies = (data ?? []).filter(
    (policy) => policy.schema === table.schema && policy.table === table.name
  )

  const { data: publications } = useDatabasePublicationsQuery({
    projectRef: project?.ref,
    connectionString: project?.connectionString,
  })
  const realtimePublication = (publications ?? []).find(
    (publication) => publication.name === 'supabase_realtime'
  )
  const realtimeEnabledTables = realtimePublication?.tables ?? []
  const isRealtimeEnabled = realtimeEnabledTables.some((t: any) => t.id === table?.id)

  const { mutate: updatePublications, isLoading: isTogglingRealtime } =
    useDatabasePublicationUpdateMutation({
      onSuccess: () => {
        setShowEnableRealtime(false)
      },
      onError: (error) => {
        toast.error(`为 ${table.name} 启用实时通信失败：${error.message}`)
      },
    })

  const canSqlWriteTables = useCheckPermissions(PermissionAction.TENANT_SQL_ADMIN_WRITE, 'tables')
  const canSqlWriteColumns = useCheckPermissions(PermissionAction.TENANT_SQL_ADMIN_WRITE, 'columns')
  const isReadOnly = !canSqlWriteTables && !canSqlWriteColumns
  // This will change when we allow autogenerated API docs for schemas other than `public`
  const doesHaveAutoGeneratedAPIDocs = table.schema === 'public'

  const { hasLint: viewHasLints, matchingLint: matchingViewLint } = getEntityLintDetails(
    table.name,
    'security_definer_view',
    ['ERROR', 'WARN'],
    lints,
    table.schema
  )

  const { hasLint: materializedViewHasLints, matchingLint: matchingMaterializedViewLint } =
    getEntityLintDetails(
      table.name,
      'materialized_view_in_api',
      ['ERROR', 'WARN'],
      lints,
      table.schema
    )

  const { mutate: sendEvent } = useSendEventMutation()

  const toggleRealtime = async () => {
    if (!project) return console.error('未找到项目')
    if (!realtimePublication) return console.error('未发现实时通信发布')

    const exists = realtimeEnabledTables.some((x: any) => x.id == table.id)
    const tables = !exists
      ? [`${table.schema}.${table.name}`].concat(
          realtimeEnabledTables.map((t: any) => `${t.schema}.${t.name}`)
        )
      : realtimeEnabledTables
          .filter((x: any) => x.id != table.id)
          .map((x: any) => `${x.schema}.${x.name}`)

    sendEvent({
      action: 'realtime_toggle_table_clicked',
      properties: {
        newState: exists ? 'disabled' : 'enabled',
        origin: 'tableGridHeader',
      },
      groups: {
        project: project?.ref ?? 'Unknown',
        organization: org?.slug ?? 'Unknown',
      },
    })

    updatePublications({
      projectRef: project?.ref,
      connectionString: project?.connectionString,
      id: realtimePublication.id,
      tables,
    })
  }

  const closeConfirmModal = () => {
    setRlsConfirmModalOpen(false)
  }
  const onToggleRLS = async () => {
    const payload = {
      id: table.id,
      rls_enabled: !(isTable && table.rls_enabled),
    }

    updateTable({
      projectRef: project?.ref!,
      connectionString: project?.connectionString,
      id: table.id,
      name: table.name,
      schema: table.schema,
      payload: payload,
    })
  }

  return (
    <div className="sb-grid-header__inner">
      {showHeaderActions && (
        <div className="flex items-center gap-x-2">
          {isReadOnly && (
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="border border-strong rounded bg-overlay-hover px-3 py-1 text-xs">
                  以只读模式查看
                </div>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                您需要额外的权限才能管理数据
              </TooltipContent>
            </Tooltip>
          )}
          {isTable && !isLocked ? (
            table.rls_enabled ? (
              <>
                {policies.length < 1 && !isLocked ? (
                  <ButtonTooltip
                    asChild
                    type="default"
                    className="group"
                    icon={<PlusCircle strokeWidth={1.5} className="text-foreground-muted" />}
                    tooltip={{
                      content: {
                        side: 'bottom',
                        className: 'w-[280px]',
                        text: '这张表的 RLS 已启用，但未设置策略。查询这张表可能返回空结果。',
                      },
                    }}
                  >
                    <Link
                      passHref
                      href={`/project/${projectRef}/auth/policies?search=${table.id}&schema=${table.schema}`}
                    >
                      添加 RLS 策略
                    </Link>
                  </ButtonTooltip>
                ) : (
                  <Button
                    asChild
                    type={policies.length < 1 && !isLocked ? 'warning' : 'default'}
                    className="group"
                    icon={
                      isLocked || policies.length > 0 ? (
                        <div
                          className={cn(
                            'flex items-center justify-center rounded-full bg-border-stronger h-[16px]',
                            policies.length > 9 ? ' px-1' : 'w-[16px]',
                            ''
                          )}
                        >
                          <span className="text-[11px] text-foreground font-mono text-center">
                            {policies.length}
                          </span>
                        </div>
                      ) : (
                        <PlusCircle strokeWidth={1.5} />
                      )
                    }
                  >
                    <Link
                      passHref
                      href={`/project/${projectRef}/auth/policies?search=${table.id}&schema=${table.schema}`}
                    >
                      Auth {policies.length > 1 ? 'policies' : 'policy'}
                    </Link>
                  </Button>
                )}
              </>
            ) : (
              <Popover_Shadcn_ modal={false}>
                <PopoverTrigger_Shadcn_ asChild>
                  <Button type="warning" icon={<Lock strokeWidth={1.5} />}>
                    RLS 已禁用
                  </Button>
                </PopoverTrigger_Shadcn_>
                <PopoverContent_Shadcn_
                  // using `portal` for a safari fix. issue with rendering outside of body element
                  portal
                  className="min-w-[395px] text-sm"
                  align="end"
                >
                  <h3 className="flex items-center gap-2">
                    <Lock size={16} /> 行级安全性（RLS）
                  </h3>
                  <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                    <p>
                      使用行级安全性，您可以限制谁可以读、写和更新这张表的数据。
                    </p>
                    <p>
                      当 RLS 启用后，匿名用户将不能读写这张表的数据。
                    </p>
                    {!isLocked && (
                      <div className="mt-2">
                        <Button
                          type="default"
                          onClick={() => setRlsConfirmModalOpen(!rlsConfirmModalOpen)}
                        >
                          为这张表启用 RLS
                        </Button>
                      </div>
                    )}
                  </div>
                </PopoverContent_Shadcn_>
              </Popover_Shadcn_>
            )
          ) : null}
          {isView && viewHasLints && (
            <Popover_Shadcn_ modal={false}>
              <PopoverTrigger_Shadcn_ asChild>
                <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                  Security Definer 视图
                </Button>
              </PopoverTrigger_Shadcn_>
              <PopoverContent_Shadcn_
                // using `portal` for a safari fix. issue with rendering outside of body element
                portal
                className="min-w-[395px] text-sm"
                align="end"
              >
                <h3 className="flex items-center gap-2">
                  <Unlock size={16} /> 保护视图
                </h3>
                <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                  <p>
                    这个视图被定义为 Security Definer 属性，授予视图创建者角色（postgres）的权限，而不是查询用户自己的角色权限。
                  </p>

                  <p>
                    当这个视图处于 public 模式，可以使用 API 访问该视图。
                  </p>

                  <div className="mt-2 flex items-center gap-2">
                    <Button
                      type="secondary"
                      onClick={() => {
                        setIsAutofixViewSecurityModalOpen(true)
                      }}
                    >
                      Autofix
                    </Button>
                    <Button type="default" asChild>
                      <Link
                        target="_blank"
                        href={`/project/${ref}/advisors/security?preset=${matchingViewLint?.level}&id=${matchingViewLint?.cache_key}`}
                      >
                        了解更多
                      </Link>
                    </Button>
                  </div>
                </div>
              </PopoverContent_Shadcn_>
            </Popover_Shadcn_>
          )}
          {isMaterializedView && materializedViewHasLints && (
            <Popover_Shadcn_ modal={false}>
              <PopoverTrigger_Shadcn_ asChild>
                <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                  Security Definer 物化视图
                </Button>
              </PopoverTrigger_Shadcn_>
              <PopoverContent_Shadcn_
                // using `portal` for a safari fix. issue with rendering outside of body element
                portal
                className="min-w-[395px] text-sm"
                align="end"
              >
                <h3 className="flex items-center gap-2">
                  <Unlock size={16} /> 保护物化视图
                </h3>
                <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                  <p>
                    这个物化视图被定义为 Security Definer 属性，授予视图创建者角色（postgres）的权限，而不是查询用户自己的角色权限。
                  </p>

                  <p>
                    当这个物化视图处于 public 模式，可以使用 API 访问该视图。
                  </p>

                  <div className="mt-2">
                    <Button type="default" asChild>
                      <Link
                        target="_blank"
                        href={`/project/${ref}/advisors/security?preset=${matchingMaterializedViewLint?.level}&id=${matchingMaterializedViewLint?.cache_key}`}
                      >
                        了解更多
                      </Link>
                    </Button>
                  </div>
                </div>
              </PopoverContent_Shadcn_>
            </Popover_Shadcn_>
          )}
          {isForeignTable && table.schema === 'public' && (
            <Popover_Shadcn_ modal={false}>
              <PopoverTrigger_Shadcn_ asChild>
                <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                  通过 API 访问外部表不受保护。
                </Button>
              </PopoverTrigger_Shadcn_>
              <PopoverContent_Shadcn_
                // using `portal` for a safari fix. issue with rendering outside of body element
                portal
                className="min-w-[395px] text-sm"
                align="end"
              >
                <h3 className="flex items-center gap-2">
                  <Unlock size={16} /> 保护外部表
                </h3>
                <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                  <p>
                    外部表不执行 RLS，因此可以不受限制地访问。
                    可以将外部表移到私有模式下，或者完全<a href="">禁用接口引擎</a>，以保护外部表。
                  </p>

                  <div className="mt-2">
                    <Button type="default" asChild>
                      <Link
                        target="_blank"
                        href="https://supabase.com/docs/guides/database/extensions/wrappers/overview#security"
                      >
                        了解更多
                      </Link>
                    </Button>
                  </div>
                </div>
              </PopoverContent_Shadcn_>
            </Popover_Shadcn_>
          )}
          <RoleImpersonationPopover serviceRoleLabel="postgres" />
          {isTable && realtimeEnabled && (
            <Button
              type="default"
              icon={
                <MousePointer2
                  strokeWidth={1.5}
                  className={isRealtimeEnabled ? 'text-brand' : 'text-foreground-muted'}
                />
              }
              onClick={() => setShowEnableRealtime(true)}
            >
              实时通信 {isRealtimeEnabled ? '已开启' : '已关闭'}
            </Button>
          )}
          {doesHaveAutoGeneratedAPIDocs && <APIDocsButton section={['entities', table.name]} />}
        </div>
      )}
      <ConfirmationModal
        visible={showEnableRealtime}
        loading={isTogglingRealtime}
        title={`为表 ${table.name} ${isRealtimeEnabled ? '禁用' : '启用'}实时通信`}
        confirmLabel={`${isRealtimeEnabled ? '禁用' : '启用'}实时通信`}
        confirmLabelLoading={`${isRealtimeEnabled ? '正在禁用' : '正在启用'}实时通信`}
        onCancel={() => setShowEnableRealtime(false)}
        onConfirm={() => toggleRealtime()}
      >
        <div className="space-y-2">
          <p className="text-sm">
            一旦{isRealtimeEnabled ? '禁用' : '启用'}实时通信，将{isRealtimeEnabled ? '不再' : ''}向授权的订阅者广播表的任何更新事件。
          </p>
          {!isRealtimeEnabled && (
            <p className="text-sm">
              您也可以在{' '}
              <Link href={`/project/${ref}/database/publications`} className="text-brand">
                数据库消息发布
              </Link>{' '}
              设置中选择要向订阅者广播的事件。
            </p>
          )}
        </div>
      </ConfirmationModal>

      <ViewEntityAutofixSecurityModal
        table={table}
        isAutofixViewSecurityModalOpen={isAutofixViewSecurityModalOpen}
        setIsAutofixViewSecurityModalOpen={setIsAutofixViewSecurityModalOpen}
      />

      {isTable && (
        <ConfirmModal
          danger={table.rls_enabled}
          visible={rlsConfirmModalOpen}
          title="确认启用行级安全策略"
          description="您确定要启用这个表的行级安全策略吗？"
          buttonLabel="启用 RLS"
          buttonLoadingLabel="正在更新"
          onSelectCancel={closeConfirmModal}
          onSelectConfirm={onToggleRLS}
        />
      )}
    </div>
  )
}

export default GridHeaderActions
