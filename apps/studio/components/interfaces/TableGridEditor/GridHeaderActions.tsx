import * as Tooltip from '@radix-ui/react-tooltip'
import type { PostgresTable } from '@supabase/postgres-meta'
import { PermissionAction } from '@supabase/shared-types/out/constants'
import { useParams } from 'common'
import { Lock, MousePointer2, PlusCircle, Unlock } from 'lucide-react'
import Link from 'next/link'
import { useState } from 'react'
import toast from 'react-hot-toast'

import { getEntityLintDetails } from 'components/interfaces/TableGridEditor/TableEntity.utils'
import { useProjectContext } from 'components/layouts/ProjectLayout/ProjectContext'
import APIDocsButton from 'components/ui/APIDocsButton'
import { useDatabasePoliciesQuery } from 'data/database-policies/database-policies-query'
import { useDatabasePublicationsQuery } from 'data/database-publications/database-publications-query'
import { useDatabasePublicationUpdateMutation } from 'data/database-publications/database-publications-update-mutation'
import { ENTITY_TYPE } from 'data/entity-types/entity-type-constants'
import { useProjectLintsQuery } from 'data/lint/lint-query'
import { useTableUpdateMutation } from 'data/tables/table-update-mutation'
import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'
import useEntityType from 'hooks/misc/useEntityType'
import { useIsFeatureEnabled } from 'hooks/misc/useIsFeatureEnabled'
import { TableLike } from 'hooks/misc/useTable'
import { EXCLUDED_SCHEMAS } from 'lib/constants/schemas'
import { Button, PopoverContent_Shadcn_, PopoverTrigger_Shadcn_, Popover_Shadcn_ } from 'ui'
import ConfirmModal from 'ui-patterns/Dialogs/ConfirmDialog'
import ConfirmationModal from 'ui-patterns/Dialogs/ConfirmationModal'
import { RoleImpersonationPopover } from '../RoleImpersonationSelector'

export interface GridHeaderActionsProps {
  table: TableLike
  canEditViaTableEditor: boolean
}

const GridHeaderActions = ({ table }: GridHeaderActionsProps) => {
  const entityType = useEntityType(table?.id)
  const { ref } = useParams()
  const { project } = useProjectContext()

  // need project lints to get security status for views
  const { data: lints = [] } = useProjectLintsQuery({
    projectRef: project?.ref,
  })

  const isTable = entityType?.type === ENTITY_TYPE.TABLE
  const isMaterializedView = entityType?.type === ENTITY_TYPE.MATERIALIZED_VIEW
  const isView = entityType?.type === ENTITY_TYPE.VIEW

  // check if current entity is a view and has an associated security definer lint

  const isForeignTable = entityType?.type === ENTITY_TYPE.FOREIGN_TABLE

  const realtimeEnabled = useIsFeatureEnabled('realtime:all')
  const isLocked = EXCLUDED_SCHEMAS.includes(table.schema)

  const { mutate: updateTable } = useTableUpdateMutation({
    onError: (error) => {
      toast.error(`启用 RLS 失败：${error.message}`)
    },
    onSettled: () => {
      closeConfirmModal()
    },
  })

  const [showEnableRealtime, setShowEnableRealtime] = useState(false)
  const [open, setOpen] = useState(false)
  const [rlsConfirmModalOpen, setRlsConfirmModalOpen] = useState(false)

  const projectRef = project?.ref
  const { data } = useDatabasePoliciesQuery({
    projectRef: project?.ref,
    connectionString: project?.connectionString,
  })
  const policies = (data ?? []).filter(
    (policy) => policy.schema === table.schema && policy.table === table.name
  )

  const { data: publications } = useDatabasePublicationsQuery({
    projectRef: project?.ref,
    connectionString: project?.connectionString,
  })
  const realtimePublication = (publications ?? []).find(
    (publication) => publication.name === 'supabase_realtime'
  )
  const realtimeEnabledTables = realtimePublication?.tables ?? []
  const isRealtimeEnabled = realtimeEnabledTables.some((t: any) => t.id === table?.id)

  const { mutate: updatePublications, isLoading: isTogglingRealtime } =
    useDatabasePublicationUpdateMutation({
      onSuccess: () => {
        setShowEnableRealtime(false)
      },
      onError: (error) => {
        toast.error(`为 ${table.name} 启用实时消息失败：${error.message}`)
      },
    })

  const canSqlWriteTables = useCheckPermissions(PermissionAction.TENANT_SQL_ADMIN_WRITE, 'tables')
  const canSqlWriteColumns = useCheckPermissions(PermissionAction.TENANT_SQL_ADMIN_WRITE, 'columns')
  const isReadOnly = !canSqlWriteTables && !canSqlWriteColumns
  // This will change when we allow autogenerated API docs for schemas other than `public`
  const doesHaveAutoGeneratedAPIDocs = table.schema === 'public'

  const { hasLint: viewHasLints, matchingLint: matchingViewLint } = getEntityLintDetails(
    table.name,
    'security_definer_view',
    ['ERROR', 'WARN'],
    lints,
    table.schema
  )

  const { hasLint: materializedViewHasLints, matchingLint: matchingMaterializedViewLint } =
    getEntityLintDetails(
      table.name,
      'materialized_view_in_api',
      ['ERROR', 'WARN'],
      lints,
      table.schema
    )

  const toggleRealtime = async () => {
    if (!project) return console.error('未找到项目')
    if (!realtimePublication) return console.error('未发现实时消息发布')

    const exists = realtimeEnabledTables.some((x: any) => x.id == table.id)
    const tables = !exists
      ? [`${table.schema}.${table.name}`].concat(
          realtimeEnabledTables.map((t: any) => `${t.schema}.${t.name}`)
        )
      : realtimeEnabledTables
          .filter((x: any) => x.id != table.id)
          .map((x: any) => `${x.schema}.${x.name}`)

    updatePublications({
      projectRef: project?.ref,
      connectionString: project?.connectionString,
      id: realtimePublication.id,
      tables,
    })
  }

  const closeConfirmModal = () => {
    setRlsConfirmModalOpen(false)
  }
  const onToggleRLS = async () => {
    const payload = {
      id: table.id,
      rls_enabled: !(table as PostgresTable).rls_enabled,
    }

    updateTable({
      projectRef: project?.ref!,
      connectionString: project?.connectionString,
      id: payload.id,
      schema: table.schema,
      payload: payload,
    })
  }

  return (
    <>
      <div className="flex items-center gap-2">
        {isReadOnly && (
          <Tooltip.Root delayDuration={0}>
            <Tooltip.Trigger className="w-full">
              <div className="border border-strong rounded bg-overlay-hover px-3 py-1 text-xs">
                以只读模式查看
              </div>
            </Tooltip.Trigger>
            <Tooltip.Portal>
              <Tooltip.Content side="bottom">
                <Tooltip.Arrow className="radix-tooltip-arrow" />
                <div
                  className={[
                    'rounded bg-alternative py-1 px-2 leading-none shadow',
                    'border border-background',
                  ].join(' ')}
                >
                  <span className="text-xs text-foreground">
                    您需要额外的权限才能管理您的项目数据
                  </span>
                </div>
              </Tooltip.Content>
            </Tooltip.Portal>
          </Tooltip.Root>
        )}

        {isTable ? (
          (table as PostgresTable).rls_enabled ? (
            <>
              {policies.length < 1 && !isLocked ? (
                <Tooltip.Root delayDuration={0}>
                  <Tooltip.Trigger asChild className="w-full">
                    <Button
                      asChild
                      type="default"
                      className="group"
                      icon={<PlusCircle strokeWidth={1.5} className="text-foreground-muted" />}
                    >
                      <Link
                        passHref
                        href={`/project/${projectRef}/auth/policies?search=${table.id}&schema=${table.schema}`}
                      >
                        添加 RLS 策略
                      </Link>
                    </Button>
                  </Tooltip.Trigger>
                  <Tooltip.Portal>
                    <Tooltip.Content side="bottom">
                      <Tooltip.Arrow className="radix-tooltip-arrow" />
                      <div
                        className={[
                          'rounded bg-alternative py-1 px-2 leading-none shadow',
                          'border border-background',
                        ].join(' ')}
                      >
                        <div className="text-xs text-foreground p-1 leading-relaxed">
                          <p>此表启用了 RLS，但没有设置策略。</p>
                          <p>
                            Select 查询将返回一个<u>空数组</u>的结果。
                          </p>
                        </div>
                      </div>
                    </Tooltip.Content>
                  </Tooltip.Portal>
                </Tooltip.Root>
              ) : (
                <Button
                  asChild
                  type={policies.length < 1 && !isLocked ? 'warning' : 'default'}
                  className="group"
                  icon={
                    isLocked || policies.length > 0 ? (
                      <span className="text-right text-xs rounded-xl px-[6px] bg-foreground-lighter/30 text-brand-1100">
                        {policies.length}
                      </span>
                    ) : (
                      <PlusCircle strokeWidth={1.5} />
                    )
                  }
                >
                  <Link
                    passHref
                    href={`/project/${projectRef}/auth/policies?search=${table.id}&schema=${table.schema}`}
                  >
                    认证策略
                  </Link>
                </Button>
              )}
            </>
          ) : (
            <Popover_Shadcn_ open={open} onOpenChange={() => setOpen(!open)} modal={false}>
              <PopoverTrigger_Shadcn_ asChild>
                <Button type="warning" icon={<Lock strokeWidth={1.5} />}>
                  RLS 已禁用
                </Button>
              </PopoverTrigger_Shadcn_>
              <PopoverContent_Shadcn_ className="min-w-[395px] text-sm" align="end">
                <h3 className="flex items-center gap-2">
                  <Lock size={16} /> 行级安全策略（RLS）
                </h3>
                <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                  <p>
                    在这张表中，您可以使用行级安全性来限制和控制谁可以读取、写入和更新数据。
                  </p>
                  <p>
                    启用 RLS 后，匿名用户将无法在表中读取/写入数据。
                  </p>
                  {!isLocked && (
                    <div className="mt-2">
                      <Button
                        type="default"
                        onClick={() => setRlsConfirmModalOpen(!rlsConfirmModalOpen)}
                      >
                        启用此表的 RLS
                      </Button>
                    </div>
                  )}
                </div>
              </PopoverContent_Shadcn_>
            </Popover_Shadcn_>
          )
        ) : null}

        {isView && viewHasLints && (
          <Popover_Shadcn_ open={open} onOpenChange={() => setOpen(!open)} modal={false}>
            <PopoverTrigger_Shadcn_ asChild>
              <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                Security Definer 视图
              </Button>
            </PopoverTrigger_Shadcn_>
            <PopoverContent_Shadcn_ className="min-w-[395px] text-sm" align="end">
              <h3 className="flex items-center gap-2">
                <Unlock size={16} /> 保护你的视图
              </h3>
              <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                <p>
                  这个视图是用 Security Definer 属性定义的，它赋予了它创建者（Postgres）的权限，而不是查询用户的权限。
                </p>

                <p>
                  由于这个视图在 public 模式下，所以可以通过你的项目的 API 访问。
                </p>

                <div className="mt-2">
                  <Button type="default" asChild>
                    <Link
                      target="_blank"
                      href={`/project/${ref}/advisors/security?preset=${matchingViewLint?.level}&id=${matchingViewLint?.cache_key}`}
                    >
                      了解更多
                    </Link>
                  </Button>
                </div>
              </div>
            </PopoverContent_Shadcn_>
          </Popover_Shadcn_>
        )}

        {isMaterializedView && materializedViewHasLints && (
          <Popover_Shadcn_ open={open} onOpenChange={() => setOpen(!open)} modal={false}>
            <PopoverTrigger_Shadcn_ asChild>
              <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                Security Definer 物化视图
              </Button>
            </PopoverTrigger_Shadcn_>
            <PopoverContent_Shadcn_ className="min-w-[395px] text-sm" align="end">
              <h3 className="flex items-center gap-2">
                <Unlock size={16} /> 保护你的物化视图
              </h3>
              <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                <p>
                  这个视图是用 Security Definer 属性定义的，它赋予了它创建者（Postgres）的权限，而不是查询用户的权限。
                </p>

                <p>
                  由于这个视图在 public 模式下，所以可以通过你的项目的 API 访问。
                </p>

                <div className="mt-2">
                  <Button type="default" asChild>
                    <Link
                      target="_blank"
                      href={`/project/${ref}/advisors/security?preset=${matchingMaterializedViewLint?.level}&id=${matchingMaterializedViewLint?.cache_key}`}
                    >
                      了解更多
                    </Link>
                  </Button>
                </div>
              </div>
            </PopoverContent_Shadcn_>
          </Popover_Shadcn_>
        )}

        {isForeignTable && entityType.schema === 'public' && (
          <Popover_Shadcn_ open={open} onOpenChange={() => setOpen(!open)} modal={false}>
            <PopoverTrigger_Shadcn_ asChild>
              <Button type="warning" icon={<Unlock strokeWidth={1.5} />}>
                通过 API 访问外部表
              </Button>
            </PopoverTrigger_Shadcn_>
            <PopoverContent_Shadcn_ className="min-w-[395px] text-sm" align="end">
              <h3 className="flex items-center gap-2">
                <Unlock size={16} /> 保护外部表
              </h3>
              <div className="grid gap-2 mt-4 text-foreground-light text-sm">
                <p>
                  外部表无法应用 RLS。请将它们移动到一个私有的模式，使其不被暴露给 Postgrest 或禁用 Postgrest。
                </p>

                <div className="mt-2">
                  <Button type="default" asChild>
                    <Link target="_blank" href="https://github.com/orgs/supabase/discussions/21647">
                      了解更多
                    </Link>
                  </Button>
                </div>
              </div>
            </PopoverContent_Shadcn_>
          </Popover_Shadcn_>
        )}

        <RoleImpersonationPopover serviceRoleLabel="postgres" />

        {isTable && realtimeEnabled && (
          <Button
            type="default"
            icon={
              <MousePointer2
                strokeWidth={1.5}
                className={isRealtimeEnabled ? 'text-brand' : 'text-foreground-muted'}
              />
            }
            onClick={() => setShowEnableRealtime(true)}
          >
            实时消息 {isRealtimeEnabled ? '已开启' : '已关闭'}
          </Button>
        )}

        {doesHaveAutoGeneratedAPIDocs && <APIDocsButton section={['entities', table.name]} />}
      </div>

      <ConfirmationModal
        visible={showEnableRealtime}
        loading={isTogglingRealtime}
        title={`为表 ${table.name} ${isRealtimeEnabled ? '禁用' : '启用'}实时消息`}
        confirmLabel={`${isRealtimeEnabled ? '禁用' : '启用'}实时消息`}
        confirmLabelLoading={`${isRealtimeEnabled ? '正在禁用' : '正在启用'}实时消息`}
        onCancel={() => setShowEnableRealtime(false)}
        onConfirm={() => toggleRealtime()}
      >
        <div className="space-y-2">
          <p className="text-sm">
            一旦{isRealtimeEnabled ? '禁用' : '启用'}实时消息，将{isRealtimeEnabled ? '不再' : ''}向授权的订阅者广播表的任何更新事件。
          </p>
          {!isRealtimeEnabled && (
            <p className="text-sm">
              您也可以在{' '}
              <Link href={`/project/${ref}/database/publications`} className="text-brand">
                数据库消息发布
              </Link>{' '}
              设置中选择要向订阅者广播的事件。
            </p>
          )}
        </div>
      </ConfirmationModal>

      {entityType?.type === ENTITY_TYPE.TABLE && (
        <ConfirmModal
          danger={(table as PostgresTable).rls_enabled}
          visible={rlsConfirmModalOpen}
          title="确认启用行级安全策略"
          description="您确定要启用这个表的行级安全策略吗？"
          buttonLabel="启用 RLS"
          buttonLoadingLabel="正在更新"
          onSelectCancel={closeConfirmModal}
          onSelectConfirm={onToggleRLS}
        />
      )}
    </>
  )
}

export default GridHeaderActions
